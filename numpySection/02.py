import numpy as np
# ğŸ§© Zadania: NumPy â€“ Tablice 2D / 3D
# ğŸ“Œ Zadanie 1: Sumy po wymiarach
# StwÃ³rz tablicÄ™ 5Ã—4 z liczbami od 0 do 19. Oblicz sumy:

# dla kaÅ¼dego wiersza (axis=1),

# dla kaÅ¼dej kolumny (axis=0),

# caÅ‚oÅ›ciowo (bez podania osi).

# arr = np.reshape(np.array(np.arange(0,20)),shape=(5,4))

# arrColumnMean = arr.mean(axis=0)
# arrRowMean = arr.mean(axis=1)
# allMean= arr.mean()



# 2.Masz tablicÄ™ 4Ã—3 z losowymi liczbami caÅ‚kowitymi z przedziaÅ‚u 10â€“100.
# Dla kaÅ¼dego wiersza wykonaj normalizacjÄ™:

#nie wiem wytlumacz
#ğŸ“Œ Zadanie 3: Maska dla wartoÅ›ci brzegowych
# Dla tablicy 6Ã—6 z wartoÅ›ciami losowymi z przedziaÅ‚u 0â€“1:

# ZamieÅ„ wszystkie wartoÅ›ci z pierwszego i ostatniego wiersza oraz kolumny na 0 (obramowanie 0).

# WnÄ™trze pozostaje bez zmian.
# array = np.array(np.random.uniform(0,1,(6,6)))

# array[:,[0,5]] = 0
# array[[0,5],:] = 0
# print(array)


# ğŸ“Œ Zadanie 4: Operacje miÄ™dzy tablicami
# UtwÃ³rz dwie tablice 3Ã—3:

# A = wartoÅ›ci od 1 do 9,

# B = wartoÅ›ci od 9 do 1.

# Oblicz:

# element-wise iloczyn,

# dot product (macierzowy),

# czy sÄ… rÃ³wne (element-wise porÃ³wnanie).

arr1 = np.array(np.arange(1,10))
arr2 = np.array(np.arange(9,0,-1))
elementWise = arr1 * arr2
dotProduct = np.dot(arr1,arr2)
isEqual = np.equal(arr1,arr2)
print(isEqual)