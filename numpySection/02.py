import numpy as np
# ğŸ§© Zadania: NumPy â€“ Tablice 2D / 3D
# ğŸ“Œ Zadanie 1: Sumy po wymiarach
# StwÃ³rz tablicÄ™ 5Ã—4 z liczbami od 0 do 19. Oblicz sumy:

# dla kaÅ¼dego wiersza (axis=1),

# dla kaÅ¼dej kolumny (axis=0),

# caÅ‚oÅ›ciowo (bez podania osi).

# arr = np.reshape(np.array(np.arange(0,20)),shape=(5,4))

# arrColumnMean = arr.mean(axis=0)
# arrRowMean = arr.mean(axis=1)
# allMean= arr.mean()



# 2.Masz tablicÄ™ 4Ã—3 z losowymi liczbami caÅ‚kowitymi z przedziaÅ‚u 10â€“100.
# Dla kaÅ¼dego wiersza wykonaj normalizacjÄ™:

# 1. Tworzymy tablicÄ™
# arrr = np.random.randint(10, 101, size=(4, 3))
# print("Oryginalna tablica:\n", arrr)

# # 2. Obliczamy min i max dla kaÅ¼dego wiersza
# row_min = arrr.min(axis=1, keepdims=True)  # shape (4, 1)
# row_max = arrr.max(axis=1, keepdims=True)  # shape (4, 1)

# # 3. Normalizujemy
# normalized = (arrr - row_min) / (row_max - row_min)
# print("Znormalizowana tablica:\n", normalized)
#ğŸ“Œ Zadanie 3: Maska dla wartoÅ›ci brzegowych
# Dla tablicy 6Ã—6 z wartoÅ›ciami losowymi z przedziaÅ‚u 0â€“1:

# ZamieÅ„ wszystkie wartoÅ›ci z pierwszego i ostatniego wiersza oraz kolumny na 0 (obramowanie 0).

# WnÄ™trze pozostaje bez zmian.
# array = np.array(np.random.uniform(0,1,(6,6)))

# array[:,[0,5]] = 0
# array[[0,5],:] = 0
# print(array)


# ğŸ“Œ Zadanie 4: Operacje miÄ™dzy tablicami
# UtwÃ³rz dwie tablice 3Ã—3:

# A = wartoÅ›ci od 1 do 9,

# B = wartoÅ›ci od 9 do 1.

# Oblicz:

# element-wise iloczyn,

# dot product (macierzowy),

# czy sÄ… rÃ³wne (element-wise porÃ³wnanie).

# arr1 = np.array(np.arange(1,10)).reshape((3,3))
# arr2 = np.array(np.arange(9,0,-1)).reshape((3.3))
# elementWise = arr1 * arr2
# dotProduct = np.dot(arr1,arr2) # arr @ arr
# isEqual = np.equal(arr1,arr2) # A == B (porÃ³wnanie)
# print(isEqual)

# ğŸ“Œ Zadanie 5: Rzutowanie i reshape
# UtwÃ³rz tablicÄ™ 3D o ksztaÅ‚cie (2, 3, 4) z kolejnymi liczbami od 0.
# Wykonaj:

# zamianÄ™ jej w 2D (ksztaÅ‚t: 6Ã—4),

# zamianÄ™ jej w 1D,

# odtwÃ³rz z powrotem do (2, 3, 4).
# count = 2*3*4
# print(count)
# arr = np.array(np.arange(0,24)).reshape((2,3,4))
# arr = arr.reshape(6,4)
# arr = arr.flatten()
# arr = arr.reshape((2,3,4))


# ğŸ“Œ Zadanie 6: NajwiÄ™ksza wartoÅ›Ä‡ w kaÅ¼dym kanale
# StwÃ³rz tablicÄ™ 3D o ksztaÅ‚cie (4, 4, 3) reprezentujÄ…cÄ… 4Ã—4 obraz RGB.
# Dla kaÅ¼dego piksela wybierz maksymalny kanaÅ‚ (np. max z R, G, B).
# Wynik: nowa 2D tablica 4Ã—4 z wartoÅ›ciami maksymalnymi.

#nie wiem


#ğŸ“Œ Zadanie 7: Tablica o strukturze szachownicy
# UtwÃ³rz 8Ã—8 tablicÄ™ NumPy z naprzemiennymi 0 i 1 jak szachownica.
# arrayOfZeroes = np.zeros((8,8))

# arrayOfZeroes[1::2,::2] = 1
# arrayOfZeroes[::2,1::2] = 1

# print(arrayOfZeroes)


# ğŸ“Œ Zadanie 8: Indeksowanie zaawansowane
# Masz tablicÄ™ 5Ã—5 z losowymi wartoÅ›ciami.
# Wypisz:

# przekÄ…tnÄ… gÅ‚Ã³wnÄ…,

# wartoÅ›ci z drugiego i czwartego wiersza,

# elementy z indeksami (0,1), (2,2), (4,4).

# randArray = np.array(np.random.randint(0,100,25)).reshape(5,5)
# print(randArray)
# #diagonal
# diagonal = np.diag(randArray)

# secondAndFourthRow = randArray[[1,3],:]


# #elementswithindicies

# elements = randArray[[0,2,4],[1,2,4]]
# print(elements)


# Masz tablicÄ™ A o ksztaÅ‚cie (4,4) oraz wektor B dÅ‚ugoÅ›ci 4.
# Dodaj wektor B do kaÅ¼dej kolumny A (broadcasting po wierszach).


# arrayX = np.array(np.random.randint(0,100,16)).reshape((4,4))
# wektorB = np.array(np.random.randint(0,100,4))

# addiction = arrayX + wektorB


# ğŸ“Œ Zadanie 10: Filtr przestrzenny (2D)
# Masz tablicÄ™ 6Ã—6 z losowymi wartoÅ›ciami.
# Wytnij z niej wszystkie moÅ¼liwe okna 3Ã—3 (bez paddingu) â€“ ile bÄ™dzie takich okien?
# Z kaÅ¼dego okna oblicz Å›redniÄ…. Wynik: nowa tablica.

arr = np.random.rand(6,6)
result =[]

for i in range(4):
    for j in range(4):
        window = arr[i:i+3,j:j+3]
        result.append(window.mean())

final = np.array(result).reshape(4,4)
print(final)